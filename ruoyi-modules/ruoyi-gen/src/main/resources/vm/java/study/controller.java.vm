package ${packageName}.controller;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.ruoyi.common.core.constant.HttpStatus;
import com.ruoyi.common.core.utils.StringUtils;
import com.ruoyi.common.core.utils.poi.ExcelUtil;
import com.ruoyi.common.core.web.controller.BaseController;
import com.ruoyi.common.core.web.domain.AjaxResult;
import com.ruoyi.common.core.web.page.PageDomain;
import com.ruoyi.common.core.web.page.TableDataInfo;
import com.ruoyi.common.core.web.page.TableSupport;
import com.ruoyi.common.log.annotation.Log;
import com.ruoyi.common.log.enums.BusinessType;
import com.ruoyi.common.security.annotation.PreAuthorize;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import java.io.IOException;
import java.util.List;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import org.apache.commons.lang3.ObjectUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${businessName}")
public class ${ClassName}Controller  extends BaseController
{
    @Resource
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:list")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo list(${ClassName} ${className})
    {
        PageDomain pageDomain=TableSupport.buildPageRequest();

        QueryWrapper<${ClassName}> wrapper2 = new QueryWrapper<>();
        //查询条件

        Page<${ClassName}> ${className}Page=${className}Service.page(new Page<>(pageDomain.getPageNum(),
            pageDomain.getPageSize()), wrapper2);

        TableDataInfo rspData = new TableDataInfo();
        rspData.setCode(HttpStatus.SUCCESS);
        rspData.setRows(${className}Page.getRecords());
        rspData.setMsg("查询成功");
        rspData.setTotal(${className}Page.getTotal());
        return rspData;

    }
#end
    /**
     * 导出${functionName}列表
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName} ${className}) throws IOException
    {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
      //导出条件

        List<${ClassName}> list = ${className}Service.list(queryWrapper);
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        util.exportExcel(response, list, "store");
    }

    /**
     * 导出${functionName}模板Excel
     */
    @PostMapping("/importTemplate")
    public void importTemplate(HttpServletResponse response) throws IOException
    {
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}.class);
        util.importTemplateExcel(response, "${functionName}");
    }


    /**
     * 获取${functionName}详细信息
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:query")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public AjaxResult getInfo(@PathVariable("${pkColumn.javaField}") Long ${pkColumn.javaField})
    {
        return AjaxResult.success(${className}Service.getById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add(@Valid @RequestBody ${ClassName} ${className})
    {
        return toAjax(${className}Service.save(${className}));
    }

    /**
     * 修改${functionName}
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult edit(@Valid @RequestBody ${ClassName} ${className})
    {
        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<>();
        return toAjax(${className}Service.update(${className},queryWrapper));
    }

    /**
     * 删除${functionName}
     */
    @PreAuthorize(hasPermi = "${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
  	@DeleteMapping("/{${pkColumn.javaField}s}")
    public AjaxResult remove(@PathVariable List<Long> ${pkColumn.javaField}s)
    {
        return toAjax(${className}Service.removeByIds(${pkColumn.javaField}s));
    }
}
